高体作业5
	内容：描述五级流水线执行过程中的状态，重点在于条件延迟和分支延迟的逻辑实现

	逻辑实现：(问题驱动)
		前提：每条指令执行划分为五个阶段，分别为取指(IF)、译码(ID)、执行(EX)、访存(MEM)、写回(WB)，用一个指令状态列表flag来存每条指令执行的阶段位置，以及用一个stall数状态列表来存每条指令受阻情况
		
		如何并发执行指令序列？
			————通过时钟数来确定指令序列的运行状态，即时钟数+1后，遍历一遍[关键点]还未执行完成的指令序列来看哪些指令可以进入到下一流水阶段
		
		如何知道指令能进入下一阶段？
			————流水过程中通过查看资源硬件占用状态以及指令之间的相关性来决定该时钟数下指令序列中的每条指令是否能够进入到下一流水阶段，若能进入下一阶段flag[index]+1,若不能stall[index]+1 (其中index对应指令标号)

		怎么看资源硬件占用状态？
			————当时钟数+1后，判断每条指令将要进行到哪个阶段，即看flag[index]+1为多少：
				若为1：则将要进入取指阶段，需要判断取指令的mem状态是否为可用状态，即mem？=0
				若为2：则将要进入译码阶段，需要判断译码器decode状态是否为可用状态，即decode?=0
				若为3：则将要进入执行阶段，需要判断运算器ALU状态是否为可用状态，即alu?=0
				若为4：则将要进入访存阶段，需要判断数据mem状态是否为可用状态，即data_mem?=0
				若为5：则将要进入写回阶段，需要判断寄存器reg状态是否为可用状态，即reg?=0

		怎么确定指令之间的相关性？
			————指令之间的相关性主要分为三种类型：读后写(WAR)、写后读(RAW)、写后写(WAW)
				当指令进入译码阶段，可能需要考虑到的指令相关性：RAW (因为默认译码阶段就要拿到需要处理的数据)
				当指令进入写回阶段，可能需要考虑到的指令相关性：WAR、WAW 
				指令之间的相关性，通过上次作业所写相关性函数来判断种类(类似查表判断)，并且在指令序列执行之前，将每条指令于其之前的所有指令的相关性都找出来
				在指令序列执行过程中，当有指令将要执行到译码或者写回阶段，需判断与该指令相关的指令是否执行到不相关阶段了，若还相关则需要停顿，stall+1，若不相关了则可进入该阶段

		当指令进入下一阶段，状态是如何变更的？
			————若指令能够进入下一阶段，需要修改阶段状态，即flag=该阶段
				修改指令在这阶段需要占用硬件资源的占用状态
				释放前一阶段占用的硬件资源，即修改占用状态为0

		怎么知道指令序列全部执行完毕？
			————当一条指令执行完毕，就将该指令从指令序列中删除，当指令序列里没有指令要执行时则为结束

		怎么处理条件延迟，即addi指令和bne指令之间的相关性，得到一个stall？
			————addi指令和bne指令之间为RAW相关
				当addi指令执行完EX，即在MEM阶段将结果写回到ID阶段的zreo控制部件
				当bne指令将要执行到ID阶段时，判断与其相关的addi指令是否以及到了MEM阶段，若到了则可进入ID阶段，否则stall+1来模拟实现这一个stall

		怎么处理分支延迟，即bne指令，得到一个stall?
			————通过pc状态来判断，即当bne指令进入ID阶段后，修改pc状态值为1(pc占用)，当bne进入EX阶段，释放pc，修改值为0
				当下一条指令准备执行时，若看到pc为1，说明此时pc被锁定，不能执行指令，因此可stall+1，从而实现一个stall

	逻辑实现：
		对需要执行的指令序列进行相关性分析，得到每条指令与其前面所有指令之间的相关性表
		若指令序列不为空则：
			时钟数+1
			判断每条指令是否能够进入各自对应的下一个阶段，若能，则进入下一阶段并修改相关状态；若不能，则stall+1停顿等待
			若指令已执行完毕，则将指令从指令序列中删除
			该时钟周期里的状态表打印
		
		打印流水线输出结果


	框架构建：
		需要构建指令结构体：指令字典{'op': '', 'rd': '', 'rs': '', 'imm': , 'op_type': , 'index': }
		需要构建指令之间相关性表：Is_dependences(ins, nxt_ins)
		需要构建指令与之前指令的相关性列表：Make_dep_table(instruction_ls)
		需要构建顺序执行的指令序列
		需构建指令的状态列表，一个flag(指令流水阶段)，一个stall(该指令需要的停顿数)
		流水过程中，每个阶段的资源硬件应设占用状态标志：
			IF阶段对应硬件资源为 		mem(指令内存)
			ID&取数阶段对应硬件资源为 decode(译码器)
			EX阶段对应硬件资源为 		alu(运算器)
			MEM阶段对应硬件资源为 	data_mem(数据内存)
			WB阶段对应硬件资源为		reg(寄存器)
		另设一个pc状态来控制分支指令的stall